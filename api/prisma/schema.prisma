generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

model User {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  githubId     String?
  provider     String?
  email        String    @unique
  image        String?
  name         String?
  password     String
  refreshToken String?
  accessToken  String?
  role         Role      @default(USER)
  posts        Post[]
  Session      Session[]

  @@index([email])
  @@index([role])
  @@index([name])
}

model Post {
  id            Int       @id @default(autoincrement())
  slug          String    @unique
  title         String
  content       String?
  published     Boolean   @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]     @relation("PostTags")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  encryptionKey String?
  encrypted     Boolean?  @default(false)

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")

  @@index([name])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  uuid      String   @unique @default(uuid()) // Kullanıcı uuid'si için yeni alan
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  city      String?
  region    String?
  country   String?
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  isActive  Boolean  @default(true)

  @@index([userId])
  @@index([token])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}
