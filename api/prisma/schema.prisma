generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

enum AccountType {
  FREE
  MEDIUM
  PREMIUM
}

model User {
  id                Int               @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  githubId          String?
  provider          String?
  email             String            @unique
  image             String?
  name              String?
  password          String
  bio               String?
  refreshToken      String?
  accessToken       String?
  role              Role              @default(USER)
  accountType       AccountType       @default(FREE)
  resetToken        String?
  resetTokenExpires DateTime?
  posts             Post[]
  Session           Session[]
  PasswordHistory   PasswordHistory[]
  ProfileImage      ProfileImage[]
  AccountTier       AccountTier?      @relation(fields: [accountTierId], references: [id])
  accountTierId     Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  githubUrl         String?
  twitterUrl        String?
  linkedinUrl       String?
  isActiveAccount   Boolean           @default(true)
  Like              Like[]
  Comment           Comment[]

  @@index([uuid])
  @@index([email])
  @@index([name])
  @@index([accountType])
  @@map("users")
}

model AccountTier {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  price           Float
  encryptionLimit Int      @default(2)
  decryptionLimit Int      @default(2)
  description     String?
  users           User[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  userId    Int
  uuid      String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([imageUrl])
  @@map("profileImages")
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime @default(now())

  @@index([postId])
  @@map("comments")
}

model PasswordHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  password  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("passwordHistory")
}

model Post {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  slug          String    @unique
  title         String
  content       String?
  published     Boolean   @default(false)
  author        User      @relation(fields: [authorUuid], references: [uuid])
  authorUuid    String
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]     @relation("PostTags")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  encryptionKey String?
  encrypted     Boolean?  @default(false)
  expireAt      DateTime?
  Like          Like[]
  Comment       Comment[]

  @@index([slug])
  @@index([authorUuid])
  @@index([categoryId])
  @@index([published])
  @@index([content])
  @@index([title])
  @@map("posts")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name])
  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]   @relation("PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("tags")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  uuid      String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  city      String?
  region    String?
  country   String?
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  isActive  Boolean  @default(true)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([token])
  @@map("blacklistedTokens")
}
